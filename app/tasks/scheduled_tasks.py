import datetime
import logging
from typing import List
from zoneinfo import ZoneInfo

from sqlalchemy.ext.asyncio import AsyncSession
from app.db.crud.user_crud import get_users_trial_ending_soon, set_trial_ending_notification_sent
from app.db.session import AsyncSessionLocal
from app.db.models import User
from app.core.config import settings

logger = logging.getLogger(__name__)

MSK_TZ = ZoneInfo("Europe/Moscow")

TRIAL_ENDING_NOTIFICATION_HOURS = 6

ADMIN_NOTIFICATION_CHAT_ID = 1024566187

NOTIFICATION_MESSAGE_TEMPLATE = """
üîî –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–ø–µ—à—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º, —á—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BTrainer —Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è ({end_date} –ú–°–ö)

–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –ø–æ —Ç–∞—Ä–∏—Ñ—É Simple ‚Äî –≤—Å–µ–≥–æ –∑–∞ 450 —Ä—É–±–ª–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—è. –£—Å–ø–µ–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—ã!

üöÄ –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–æ–≤.
- –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.

üîó –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞.

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å BTrainer! ‚ú®

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–° –∑–∞–±–æ—Ç–æ–π –æ –≤–∞—à–µ–º —Ä–∞–∑–≤–∏—Ç–∏–∏,
–ö–æ–º–∞–Ω–¥–∞ BTrainer ‚ù§Ô∏è
"""

ADMIN_NOTIFICATION_TEMPLATE = """
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: TG ID `{user_tg_id}` (DB ID `{user_db_id}`)
Username: @{username}
–ò–º—è: {first_name} {last_name}
–¢—Ä–∏–∞–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {trial_end_date}
"""

async def send_trial_ending_notifications(bot):
    logger.info("Running scheduled task: send_trial_ending_notifications")
    async with AsyncSessionLocal() as db:
        users_to_notify: List[User] = await get_users_trial_ending_soon(db, TRIAL_ENDING_NOTIFICATION_HOURS)

        if not users_to_notify:
            logger.info("No users found whose trial is ending soon and need notification.")
            return

        logger.info(f"Found {len(users_to_notify)} users whose trial is ending soon and need notification.")

        for user in users_to_notify:
            try:
                end_date_str = '–±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
                if user.trial_end_date:
                    msk_end_date = user.trial_end_date.astimezone(MSK_TZ)
                    end_date_str = msk_end_date.strftime('%d.%m.%Y %H:%M')

                message_text = NOTIFICATION_MESSAGE_TEMPLATE.format(end_date=end_date_str)

                await bot.send_message(chat_id=user.telegram_id, text=message_text)
                logger.info(f"Sent trial ending notification to user {user.telegram_id} (DB ID: {user.id}).")

                await set_trial_ending_notification_sent(db, user.id)

                admin_message_text = ADMIN_NOTIFICATION_TEMPLATE.format(
                    user_tg_id=user.telegram_id,
                    user_db_id=user.id,
                    username=user.username if user.username else 'N/A',
                    first_name=user.first_name if user.first_name else '',
                    last_name=user.last_name if user.last_name else '',
                    trial_end_date=end_date_str
                ).replace('  ', ' ')

                try:
                    await bot.send_message(chat_id=ADMIN_NOTIFICATION_CHAT_ID, text=admin_message_text)
                    logger.info(f"Sent trial ending notification confirmation to admin chat ID {ADMIN_NOTIFICATION_CHAT_ID} for user {user.id}.")
                except Exception as admin_e:
                    logger.error(f"Failed to send admin notification for user {user.id} to chat ID {ADMIN_NOTIFICATION_CHAT_ID}: {admin_e}", exc_info=True)

            except Exception as e:
                logger.error(f"Failed to send trial ending notification to user {user.telegram_id} (DB ID: {user.id}): {e}", exc_info=True)
