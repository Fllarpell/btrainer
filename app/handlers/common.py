import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold
from sqlalchemy.orm import Session
import datetime

from app.db import crud
from app.db.models import SubscriptionStatus
from app.ui.keyboards import get_main_menu_keyboard, get_after_case_keyboard

common_router = Router(name=__name__) 

@common_router.message(CommandStart())
async def handle_start(
    message: types.Message, 
    db_session: Session, 
):
    user = message.from_user
    logger = logging.getLogger(__name__)
    logger.info(f"User {user.id} ({user.full_name}) started chat.")

    db_user = crud.get_user_by_telegram_id(db=db_session, telegram_id=user.id)
    main_menu_kb = get_main_menu_keyboard()

    if db_user:
        logger.info(f"User {user.id} already exists in DB. Updating activity.")
        crud.update_user_activity(db=db_session, telegram_id=user.id)
        if db_user.is_blocked:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            logger.warning(f"Blocked user {user.id} tried to use /start.")
            return 
        greeting_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {hbold(user.first_name)}!\n"
        greeting_message += "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏?"
    else:
        logger.info(f"New user {user.id}. Creating new DB entry.")
        db_user = crud.create_user(
            db=db_session, 
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language_code=user.language_code
            # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
            # subscription_status=SubscriptionStatus.TRIAL,
            # trial_start_date=datetime.datetime.now(datetime.timezone.utc),
            # trial_end_date=datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=7)
        )
        greeting_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(user.first_name)}! –Ø <b>BTrainer</b>.\n"
            f"–Ø –ø–æ–º–æ–≥–∞—é –ö–ü–¢-–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞–º —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞—Ö.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        )
        logger.info(f"User {db_user.telegram_id} (internal id: {db_user.id}) created in DB.")

    await message.answer(
        greeting_message,
        reply_markup=main_menu_kb
    )

@common_router.message(Command("help"))
async def handle_help(message: types.Message, db_session: Session):
    help_text = (
        "–Ø –±–æ—Ç <b>BTrainer</b>, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –ö–ü–¢.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/case –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ 'üíº –ü–æ–ª—É—á–∏—Ç—å –∫–µ–π—Å' - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å\n"
        "/progress –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/tariffs –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ 'üí≤ –¢–∞—Ä–∏—Ñ—ã' - —É–∑–Ω–∞—Ç—å –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        "/help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '‚Ñπ –ü–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–∞–º."
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@common_router.message(F.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def handle_help_button(message: types.Message, db_session: Session):
    await handle_help(message, db_session)

@common_router.message(F.text == "üíº –ü–æ–ª—É—á–∏—Ç—å –∫–µ–π—Å")
async def handle_request_case_button(message: types.Message, db_session: Session):
    user = message.from_user
    logger = logging.getLogger(__name__)
    logger.info(f"User {user.id} requested a new case via button.")

    case_title_placeholder = "–ö–µ–π—Å: –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏"
    case_description_placeholder = (
        "–ö–ª–∏–µ–Ω—Ç, –º—É–∂—á–∏–Ω–∞ 35 –ª–µ—Ç, –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–≤–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏–ª—Å—è —Å –∂–∞–ª–æ–±–∞–º–∏ –Ω–∞ "
        "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –æ–¥–Ω–∏–º –∏–∑ –∫–æ–ª–ª–µ–≥. –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –Ω–µ–≥–æ —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å, "
        "—Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Ö—É–¥—à–∞–µ—Ç –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. "
        "–ö–ª–∏–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–≥—É –∫–∞–∫ '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ' –∏ '–Ω–µ –∂–µ–ª–∞—é—â–µ–≥–æ –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å'. "
        "–°–∞–º –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ñ—Ä–æ–Ω—Ç–∞—Ü–∏–π, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç, —á—Ç–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç. "
        "–ó–∞–ø—Ä–æ—Å: –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–ª–∏ "
        "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –µ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è."
    )
    ai_model_name = "DeepSeek_placeholder_v0.1"
    prompt_version_placeholder = "generic_case_prompt_v1"


    try:
        new_case = crud.create_case(
            db=db_session,
            title=case_title_placeholder,
            description=case_description_placeholder,
            ai_model_used=ai_model_name,
            prompt_version=prompt_version_placeholder,
            # created_by_user_id=user.id 
        )
        logger.info(f"Case {new_case.id} created and saved to DB for user {user.id}.")

        response_text = f"{hbold(new_case.title)}\n\n{new_case.description}"
        
        await message.answer(
            response_text,
            reply_markup=get_after_case_keyboard(case_id=new_case.id)
        )

    except Exception as e:
        logger.error(f"Error processing case request for user {user.id}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

@common_router.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def handle_my_progress_button(message: types.Message, db_session: Session):
    user_id = message.from_user.id
    logger = logging.getLogger(__name__)
    logger.info(f"User {user_id} requested their progress via button.")
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤, —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Ç.–¥.)
    
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–Ω—ã–º –∫–µ–π—Å–∞–º."
    )

@common_router.message(F.text == "üí≤ –¢–∞—Ä–∏—Ñ—ã")
async def handle_tariffs_button(message: types.Message, db_session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üí≤ –¢–∞—Ä–∏—Ñ—ã'.
    –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É.
    """
    user_id = message.from_user.id
    logger = logging.getLogger(__name__)
    logger.info(f"User {user_id} requested tariff information via button.")
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
    # –í–æ–∑–º–æ–∂–Ω–æ, —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
    
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω."
    )

@common_router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def handle_payment_button(message: types.Message, db_session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø'.
    –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É.
    """
    user_id = message.from_user.id
    logger = logging.getLogger(__name__)
    logger.info(f"User {user_id} requested payment options via button.")

    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ (YooKassa API)
    # –í–æ–∑–º–æ–∂–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã,
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—à–µ–ª —Å—é–¥–∞ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–∞—Ä–∏—Ñ–æ–≤.

    await message.answer(
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞."
    )

