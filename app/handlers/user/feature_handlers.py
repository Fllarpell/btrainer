import logging
import json
from collections import Counter
from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext

from app.ui.keyboards import get_main_menu_keyboard, get_subscribe_inline_keyboard, get_after_solution_analysis_keyboard, get_back_to_main_menu_keyboard

from app.db.crud.user_crud import get_user_by_telegram_id
from app.db.crud.solution_crud import (
    get_solutions_by_user, 
    count_solutions_by_user, 
    count_solutions_by_user_and_rating
)
from app.db import crud
from app.db.models import SubscriptionStatus, UserRole
from app.db.crud import transaction_crud
import uuid
from decimal import Decimal
from aiogram.types import LabeledPrice
from app.core.config import settings, is_admin
from app.states.feedback_states import FeedbackStates
from app.services import ai_service
from app.utils.formatters import format_datetime_md, escape_md

from app.handlers.payment_handlers import (
    MONTHLY_PLAN_TITLE,
    MONTHLY_PLAN_DESCRIPTION,
    MONTHLY_PLAN_PRICE_RUB,
    MONTHLY_PLAN_CURRENCY,
    MONTHLY_PLAN_ID,
    MONTHLY_PLAN_DURATION_DAYS
)

from app.handlers.user.user_onboarding_handlers import HELP_TEXT

from app.handlers.case.case_lifecycle_handlers import _generate_and_send_case
from app.states.solve_case import SolveCaseStates

logger = logging.getLogger(__name__)
feature_router = Router(name="feature_handlers") 


def get_user_rank(solved_count: int) -> str:
    """Determines a user's rank based on solved cases."""
    if solved_count == 0:
        return "üå± –ù–æ–≤–∏—á–æ–∫"
    elif solved_count < 5:
        return "üß† –ü—Ä–∞–∫—Ç–∏–∫–∞–Ω—Ç"
    elif solved_count < 15:
        return "üí° –°—Ç–∞–∂–µ—Ä-—Ç–µ—Ä–∞–ø–µ–≤—Ç"
    elif solved_count < 30:
        return "‚ú® –ú–ª–∞–¥—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    elif solved_count < 50:
        return "üèÜ –û–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
    else:
        return "‚≠ê –ú–∞—Å—Ç–µ—Ä CBT"

async def _get_my_progress_content(user_telegram_id: int, session: AsyncSession) -> str:
    logger.debug(f"Fetching progress content for user {user_telegram_id}.")
    db_user = await get_user_by_telegram_id(db=session, telegram_id=user_telegram_id)

    if not db_user:
        logger.warning(f"User {user_telegram_id} requested progress but not found in DB.")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start\\."

    quality_solved_count = await count_solutions_by_user_and_rating(
        db=session, 
        user_id=db_user.id, 
        target_rating="meets_expectations"
    )
    user_rank = get_user_rank(quality_solved_count)
    user_rank_escaped = escape_md(user_rank)

    solutions_for_display_limit = 3
    recent_solutions = await get_solutions_by_user(
        db=session, user_id=db_user.id, limit=solutions_for_display_limit 
    )

    ai_ratings = [sol.user_rating_of_analysis for sol in recent_solutions if sol.user_rating_of_analysis is not None]
    avg_ai_rating = sum(ai_ratings) / len(ai_ratings) if ai_ratings else None

    all_strengths = []
    all_areas_for_improvement = []
    parse_errors = 0
    for sol in recent_solutions:
        if sol.ai_analysis_text:
            try:
                analysis_data = json.loads(sol.ai_analysis_text)
                if isinstance(analysis_data.get("strengths"), list):
                    all_strengths.extend([str(s).strip() for s in analysis_data["strengths"] if str(s).strip()])
                if isinstance(analysis_data.get("areas_for_improvement"), list):
                    all_areas_for_improvement.extend([str(a).strip() for a in analysis_data["areas_for_improvement"] if str(a).strip()])
            except json.JSONDecodeError:
                parse_errors += 1
            except Exception:
                 parse_errors += 1
    if parse_errors > 0:
         logger.warning(f"Encountered {parse_errors} errors parsing AI analysis for user {user_telegram_id} in progress.")

    strength_counts = Counter(all_strengths)
    improvement_counts = Counter(all_areas_for_improvement)
    top_n = 3
    common_strengths = strength_counts.most_common(top_n)
    common_improvements = improvement_counts.most_common(top_n)
    ai_feedback_shown = False

    progress_lines = []
    progress_lines.append(f"üèÜ –í–∞—à –¢–µ–∫—É—â–∏–π –†–∞–Ω–≥: {user_rank_escaped}")
    progress_lines.append(f"üí° –†–µ—à–µ–Ω–æ –∫–µ–π—Å–æ–≤ \\(–∑–∞—Å—á–∏—Ç–∞–Ω–æ\\): *{quality_solved_count}*")

    if recent_solutions:
        most_recent_solution = recent_solutions[0]
        last_solved_date = format_datetime_md(most_recent_solution.submitted_at)
        progress_lines.append(f"üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_solved_date}")
        display_limit = 3
        if len(recent_solutions) > 0:
            recent_count = min(len(recent_solutions), display_limit)
            progress_lines.append(f"\nüîç *–ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è \\({recent_count} –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö\\):*")
            for i, sol in enumerate(recent_solutions[:display_limit]):
                case_title = "*–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å*"
                if sol.case and sol.case.title:
                    case_title = escape_md(sol.case.title)
                progress_lines.append(f"{i+1}\\. {case_title}")
    else:
        progress_lines.append("\n–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ–≤–∞—Ç–æ, –Ω–æ —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\\!")
        progress_lines.append("–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ ¬´üìù –ù–æ–≤—ã–π –∫–µ–π—Å¬ª ‚Äì —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏\\.")

    if avg_ai_rating is not None:
        avg_rating_str = f"{avg_ai_rating:.1f}".replace('.', '\\.')
        ratings_count = len(ai_ratings)
        progress_lines.append(f"\nüìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—à–µ–Ω–∏–π: *{avg_rating_str}/5* \\(–Ω–∞ –æ—Å–Ω–æ–≤–µ {ratings_count} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö\\)")
        ai_feedback_shown = True

    if common_strengths:
        progress_lines.append("\n‚≠ê *–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã \\(–ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–Ω–∞–ª–∏–∑–∞–º\\):*")
        for strength, count in common_strengths:
            escaped_strength = escape_md(strength)
            progress_lines.append(f"\\- {escaped_strength}")
        ai_feedback_shown = True
    
    if common_improvements:
        progress_lines.append("\nüõ†Ô∏è *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ \\(—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞\\):*")
        for improvement, count in common_improvements:
            escaped_improvement = escape_md(improvement)
            progress_lines.append(f"\\- {escaped_improvement}")
        ai_feedback_shown = True

    if ai_feedback_shown:
        progress_lines.append("\n_–ö–∞–∂–¥—ã–π —Ä–µ—à–µ–Ω–Ω—ã–π –∫–µ–π—Å ‚Äì —ç—Ç–æ —à–∞–≥ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É\\! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\\._")
    else:
        progress_lines.append("\n_–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äì –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É\\! –° –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Å–∞–π—Ç–æ–≤\\._")

    return "\n".join(progress_lines)

@feature_router.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def handle_my_progress_button(message: types.Message, session: AsyncSession):
    user_telegram_id = message.from_user.id
    logger.info(f"User {user_telegram_id} requested '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' via text button/command.")
    
    progress_text = await _get_my_progress_content(user_telegram_id, session)
    
    await message.answer(
        progress_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="MarkdownV2"
    )

async def _get_tariffs_data(user_telegram_id: int, user_first_name: str, session: AsyncSession) -> tuple[str, bool, str, str]:
    """Generates tariffs text and subscription button data."""
    logger.info(f"Fetching tariffs data for user {user_telegram_id}.")
    
    db_user = await get_user_by_telegram_id(db=session, telegram_id=user_telegram_id)
    show_subscribe_button = True

    title_escaped = escape_md(MONTHLY_PLAN_TITLE)
    desc_escaped = escape_md(MONTHLY_PLAN_DESCRIPTION)
    price_info = f"–¶–µ–Ω–∞: {MONTHLY_PLAN_PRICE_RUB:.2f} {MONTHLY_PLAN_CURRENCY}"
    price_info_escaped = escape_md(price_info)

    tariffs_text = (
        f"üíé *{title_escaped}*\n"
        f"{desc_escaped}\n"
        f"üí∏ {price_info_escaped}\n\n"
        f"*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–µ–π—Å–∞–º\n"
        f"‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π\n"
        f"‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–π AI\\-–∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è\n"
        f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏–π\n\n"
        f"_–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\\. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram\\._"
    )

    plan_id_for_button = MONTHLY_PLAN_ID
    button_text_for_subscribe = f"üöÄ {escape_md(MONTHLY_PLAN_TITLE)}"

    return tariffs_text, show_subscribe_button, plan_id_for_button, button_text_for_subscribe

@feature_router.message(F.text == "üí≥ –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞")
async def handle_tariffs_button(message: types.Message, session: AsyncSession):
    user_telegram_id = message.from_user.id
    logger.info(f"User {user_telegram_id} pressed '–¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞' text button/command.")
    
    tariffs_text, show_subscribe, plan_id, plan_button_text = await _get_tariffs_data(
        user_telegram_id, message.from_user.first_name, session
    )

    reply_markup = get_main_menu_keyboard()
    if show_subscribe:
        reply_markup = get_subscribe_inline_keyboard(plan_id=plan_id, plan_title=plan_button_text)
    
    await message.answer(tariffs_text, reply_markup=reply_markup, parse_mode="MarkdownV2")

@feature_router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def handle_payment_button(message: types.Message, session: AsyncSession):
    user_telegram_id = message.from_user.id
    logger.info(f"User {user_telegram_id} pressed '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø' button.")

    if not settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN:
        logger.error("Payment initiation failed: TELEGRAM_PAYMENT_PROVIDER_TOKEN is not set.")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard())
        return

    db_user = await get_user_by_telegram_id(db=session, telegram_id=user_telegram_id)
    if not db_user:
        logger.warning(f"User {user_telegram_id} tried to pay but not found in DB. Redirecting to /start.")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.", reply_markup=get_main_menu_keyboard())
        return

    if db_user.subscription_status == SubscriptionStatus.ACTIVE and db_user.subscription_expires_at:
        expires_at = db_user.subscription_expires_at
        expires_at_str = expires_at.strftime('%d.%m.%Y %H:%M UTC')
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{db_user.current_plan_name or MONTHLY_PLAN_TITLE}', –∫–æ—Ç–æ—Ä–∞—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expires_at_str}.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë ‚Äî –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=get_main_menu_keyboard()
        )
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
    internal_transaction_id = f"btrainer_sub_{MONTHLY_PLAN_ID}_{uuid.uuid4()}"
    await transaction_crud.create_transaction(
        db=session,
        user_id=db_user.id,
        internal_transaction_id=internal_transaction_id,
        amount=Decimal(str(MONTHLY_PLAN_PRICE_RUB)),
        currency=MONTHLY_PLAN_CURRENCY,
        plan_name=MONTHLY_PLAN_ID
    )
    logger.info(f"Created PENDING transaction {internal_transaction_id} for user {user_telegram_id} for plan {MONTHLY_PLAN_ID}")

    prices = [LabeledPrice(label=MONTHLY_PLAN_TITLE, amount=int(MONTHLY_PLAN_PRICE_RUB * 100))]

    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title=MONTHLY_PLAN_TITLE,
        description=MONTHLY_PLAN_DESCRIPTION,
        payload=internal_transaction_id, # Our unique internal transaction ID
        provider_token=settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN,
        currency=MONTHLY_PLAN_CURRENCY,
        prices=prices,
        start_parameter="btrainer-monthly-sub", # Optional deep-linking parameter
        reply_markup=None
    )
    logger.info(f"Invoice for plan {MONTHLY_PLAN_ID} sent to user {user_telegram_id} with payload {internal_transaction_id}")

@feature_router.callback_query(F.data.startswith("subscribe_action:"))
async def handle_subscribe_callback(query: types.CallbackQuery, session: AsyncSession):
    user_telegram_id = query.from_user.id
    plan_id_from_callback = query.data.split(":")[1]

    logger.info(f"User {user_telegram_id} pressed inline subscribe button for plan_id: {plan_id_from_callback}")

    if not settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN:
        logger.error(f"Payment initiation failed for user {user_telegram_id} (callback): TELEGRAM_PAYMENT_PROVIDER_TOKEN is not set.")
        await query.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=False)
        return

    db_user = await get_user_by_telegram_id(db=session, telegram_id=user_telegram_id)
    if not db_user:
        logger.warning(f"User {user_telegram_id} (callback) tried to pay but not found in DB.")
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.", show_alert=False)
        return

    if db_user.subscription_status == SubscriptionStatus.ACTIVE and db_user.subscription_expires_at:
        expires_at = db_user.subscription_expires_at
        expires_at_str = expires_at.strftime('%d.%m.%Y %H:%M UTC')
        # await query.answer(
        #     f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{MONTHLY_PLAN_TITLE}', –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expires_at_str}. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë ‚Äî –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
        # )
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
    if plan_id_from_callback == MONTHLY_PLAN_ID:
        current_plan_title = MONTHLY_PLAN_TITLE
        current_plan_description = MONTHLY_PLAN_DESCRIPTION
        current_plan_price_rub = MONTHLY_PLAN_PRICE_RUB
        current_plan_currency = MONTHLY_PLAN_CURRENCY
    else:
        logger.error(f"Unknown plan_id '{plan_id_from_callback}' received from subscribe_action for user {user_telegram_id}.")
        await query.answer("–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=False)
        return

    internal_transaction_id = f"btrainer_sub_{plan_id_from_callback}_{uuid.uuid4()}"
    await transaction_crud.create_transaction(
        db=session,
        user_id=db_user.id,
        internal_transaction_id=internal_transaction_id,
        amount=Decimal(str(current_plan_price_rub)),
        currency=current_plan_currency,
        plan_name=plan_id_from_callback
    )
    logger.info(f"Created PENDING transaction {internal_transaction_id} for user {user_telegram_id} (callback) for plan {plan_id_from_callback}")

    prices = [LabeledPrice(label=current_plan_title, amount=int(current_plan_price_rub * 100))]

    try:
        logger.info(f"Attempting to send invoice with provider token: {settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN[:10]}...")
        await query.bot.send_invoice(
            chat_id=query.message.chat.id,
            title=current_plan_title,
            description=current_plan_description,
            payload=internal_transaction_id,
            provider_token=settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN,
            currency=current_plan_currency,
            prices=prices,
            start_parameter=f"btrainer-sub-{plan_id_from_callback}",
        )
        await query.answer()
        logger.info(f"Invoice for plan {plan_id_from_callback} sent to user {user_telegram_id} (callback) with payload {internal_transaction_id}")

    except Exception as e:
        logger.error(f"Failed to send invoice to user {user_telegram_id} (callback) for plan {plan_id_from_callback}: {e}", exc_info=True)
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=False)
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

@feature_router.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def handle_leave_feedback_text_button(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} pressed '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' text button.")
    await state.set_state(FeedbackStates.awaiting_feedback_text)
    await message.answer(
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. "
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äì "
        "—Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤–æ –≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ —É—á–µ—Å—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    )

@feature_router.message(FeedbackStates.awaiting_feedback_text, F.text & ~F.text.startswith('/'))
async def process_feedback_text(message: types.Message, session: AsyncSession, state: FSMContext):
    feedback_text = message.text
    user_telegram_id = message.from_user.id
    current_user_role = UserRole.USER

    if not feedback_text or len(feedback_text.strip()) < 10:
        await message.reply(
            "–•–º, –∫–∞–∂–µ—Ç—Å—è, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–∞–ª–æ–≤–∞—Ç–æ –¥–µ—Ç–∞–ª–µ–π. "
            "–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –≤–Ω–∏–∫–Ω—É—Ç—å, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ (—Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."
        )
        return

    db_user = await get_user_by_telegram_id(db=session, telegram_id=user_telegram_id)
    if not db_user:
        logger.warning(f"User {user_telegram_id} tried to leave feedback but not found in DB.")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤."
        )
        await state.clear()
        return
    current_user_role = db_user.role

    ai_analysis_result = None
    is_meaningful_ai = None
    ai_reason = "AI analysis not performed or failed."
    ai_category = "unknown"
    raw_ai_data = None

    await message.answer("‚ú® –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω.")

    try:
        ai_analysis_result = await ai_service.analyze_feedback_substance(feedback_text)
        if ai_analysis_result:
            raw_ai_data = ai_analysis_result
            is_meaningful_ai = ai_analysis_result.get("is_meaningful")
            ai_reason = ai_analysis_result.get("reason", "No reason provided by AI.")
            ai_category = ai_analysis_result.get("category", "unknown")
            logger.info(f"AI analysis for feedback from {user_telegram_id}: Meaningful={is_meaningful_ai}, Category='{ai_category}', Reason='{ai_reason}'")
        else:
            logger.warning(f"AI analysis returned None for feedback from {user_telegram_id}.")
            ai_reason = "AI analysis did not return a result."

    except Exception as e:
        logger.error(f"Error during AI feedback analysis for user {user_telegram_id}: {e}", exc_info=True)
        ai_reason = f"Error during AI analysis: {str(e)}"

    try:
        new_feedback = await crud.create_feedback(
            db=session, 
            user_id=db_user.id, 
            text=feedback_text,
            is_meaningful_ai=is_meaningful_ai,
            ai_analysis_reason=ai_reason,
            ai_analysis_category=ai_category,
            raw_ai_response=raw_ai_data
        )
        logger.info(f"Feedback from user {db_user.telegram_id} saved with ID {new_feedback.id}, AI meaningful: {is_meaningful_ai}, Category: {ai_category}.")
        
        response_message = "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω –∏ –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
        response_message += "\n–ö–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –∏–∑—É—á–∏–º."

        await message.answer(
            response_message, 
            reply_markup=get_main_menu_keyboard(user_role=current_user_role)
        )
    except Exception as e:
        logger.error(f"Failed to save feedback (with AI analysis) for user {db_user.telegram_id}: {e}", exc_info=True)
        await message.answer(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!",
            reply_markup=get_main_menu_keyboard(user_role=current_user_role)
        )
    finally:
        await state.clear()

@feature_router.callback_query(F.data == "main_menu:request_case")
async def cq_main_menu_request_case(query: types.CallbackQuery, session: AsyncSession, state: FSMContext, bot: Bot):
    logger.info(f"User {query.from_user.id} selected 'Request Case' from inline menu.")
    await query.answer("–ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—ã–π –∫–µ–π—Å...")

    await _generate_and_send_case(message_or_callback_query=query, state=state, session=session)

    try:
        await query.message.edit_text(
            "‚úîÔ∏è –ù–æ–≤—ã–π –∫–µ–π—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ!",
            reply_markup=get_back_to_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error editing original menu message after sending case: {e}")

@feature_router.callback_query(F.data == "main_menu:my_progress")
async def cq_main_menu_my_progress(query: types.CallbackQuery, session: AsyncSession):
    logger.info(f"User {query.from_user.id} selected 'My Progress' from inline menu.")
    await query.answer()
    
    progress_text = await _get_my_progress_content(query.from_user.id, session)
    
    await query.message.edit_text(
        text=progress_text,
        reply_markup=get_back_to_main_menu_keyboard(),
        parse_mode="MarkdownV2"
    )

@feature_router.callback_query(F.data == "main_menu:leave_feedback")
async def cq_main_menu_leave_feedback(query: types.CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} selected 'Leave Feedback' from inline menu.")
    await query.answer()

    await state.set_state(FeedbackStates.awaiting_feedback_text)
    
    feedback_prompt_text = (
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. "
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äì "
        "—Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤–æ –≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ —É—á–µ—Å—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
    )

    await query.message.edit_text(
        text=feedback_prompt_text,
        reply_markup=get_back_to_main_menu_keyboard() # Only Back button
    )

@feature_router.callback_query(F.data == "main_menu:tariffs")
async def cq_main_menu_tariffs(query: types.CallbackQuery, session: AsyncSession):
    logger.info(f"User {query.from_user.id} selected 'Tariffs' from inline menu.")
    await query.answer()

    tariffs_text, show_subscribe, plan_id, plan_button_text = await _get_tariffs_data(
        query.from_user.id, query.from_user.first_name, session
    )

    builder = InlineKeyboardBuilder()
    if show_subscribe:
        builder.button(text=plan_button_text, callback_data=f"subscribe_action:{plan_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu:show")
    builder.adjust(1)

    await query.message.edit_text(
        text=tariffs_text,
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )

@feature_router.callback_query(F.data == "main_menu:help")
async def cq_main_menu_help(query: types.CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} selected 'Help' from inline menu.")
    await query.answer()
    await query.message.edit_text(
        text=HELP_TEXT,
        reply_markup=get_back_to_main_menu_keyboard(),
        parse_mode="HTML"
    )
