from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from app.db.models import User, UserRole, AISourceType
from aiogram.filters.callback_data import CallbackData
from typing import Optional
from datetime import datetime

class AdminUserCallback(CallbackData, prefix="admin_user"):
    action: str
    user_id: int
    page: Optional[int] = None

class AdminCaseCallback(CallbackData, prefix="admin_case"):
    action: str
    case_id: Optional[int] = None
    page: Optional[int] = None

class OnboardingCallback(CallbackData, prefix="onboarding"):
    action: str

class CaseAction(CallbackData, prefix="case_action"):
    pass

class UserProfileCallback(CallbackData, prefix="user_profile"):
    action: str

def get_main_menu_keyboard(user_role: UserRole = UserRole.USER) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìù –ù–æ–≤—ã–π –∫–µ–π—Å"), KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞")]
    ]
    if user_role == UserRole.ADMIN:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_onboarding_welcome_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!", callback_data=OnboardingCallback(action="tell_me_more").pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_onboarding_explanation_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–ö–∞–∫ –º–Ω–µ –Ω–∞—á–∞—Ç—å?", callback_data=OnboardingCallback(action="how_to_start").pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_onboarding_trial_offer_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å 7-–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data=OnboardingCallback(action="start_trial").pack())],
        # TODO: Add "View Subscription Plans" button later if needed, pointing to tariff_handlers
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_panel_main_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_menu")
    )
    builder.row(
        InlineKeyboardButton(text="–ö–µ–π—Å—ã", callback_data="admin_cases_menu")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ë–î", callback_data="admin_total_db_requests")
    )
    builder.row(
        InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ò–ò", callback_data="admin_ai_references_menu")
    )
    builder.row(
        InlineKeyboardButton(text="üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ —Ç—Ä–∏–∞–ª–∞", callback_data="admin_trial_conversion_stats")
    )
    return builder.as_markup()

def get_admin_users_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä. 1)", callback_data="admin_list_users_page_0")],
        [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ TG ID)", callback_data="admin_find_user_by_tg_id_prompt")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –∞–¥–º–∏–Ω –º–µ–Ω—é)", callback_data="admin_main_menu_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_admin_user_list_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons_row = []
    if current_page > 0:
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_list_users_page_{current_page - 1}"))
    
    buttons_row.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="admin_noop")) # No operation button

    if current_page < total_pages - 1:
        buttons_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"admin_list_users_page_{current_page + 1}"))
    
    keyboard_buttons = [buttons_row]
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)", callback_data="admin_users_menu_back")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_admin_user_actions_keyboard(db_user: User) -> InlineKeyboardMarkup:
    buttons = []

    if db_user.is_blocked:
        buttons.append([InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_unblock_user_{db_user.id}")])
    else:
        buttons.append([InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_block_user_{db_user.id}")])

    if db_user.role == UserRole.ADMIN:
        buttons.append([InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"admin_set_role_user_{db_user.id}")])
    else:
        buttons.append([InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"admin_set_role_admin_{db_user.id}")])
    
    buttons.append([InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–∞–ª–æ–º", callback_data=f"admin_manage_trial_{db_user.id}")])
    buttons.append([InlineKeyboardButton(text="üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data=f"admin_manage_sub_{db_user.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)", callback_data="admin_users_menu_back")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_admin_cases_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤ (—Å—Ç—Ä. 1)", callback_data="admin_list_cases_page_0")],
        #[InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å –≤—Ä—É—á–Ω—É—é", callback_data="admin_add_case_manual_prompt")],
        #[InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –∫–µ–π—Å (–ø–æ ID)", callback_data="admin_find_case_by_id_prompt")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –≥–ª. –∞–¥–º–∏–Ω –º–µ–Ω—é)", callback_data="admin_main_menu_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_admin_case_list_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons_row = []
    if current_page > 0:
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_list_cases_page_{current_page - 1}"))
    
    buttons_row.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="admin_noop")) # No operation button

    if current_page < total_pages - 1:
        buttons_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"admin_list_cases_page_{current_page + 1}"))
    
    keyboard_buttons = []
    if buttons_row:
        keyboard_buttons.append(buttons_row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ö–µ–π—Å—ã)", callback_data="admin_cases_menu")]) 
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_subscribe_inline_keyboard(plan_id: str, plan_title: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"‚ú® –û—Ñ–æ—Ä–º–∏—Ç—å {plan_title}",
        callback_data=f"subscribe_action:{plan_id}"
    )
    return builder.as_markup()

def get_after_case_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÄ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–æ–π –∫–µ–π—Å", callback_data="request_another_case")
    builder.adjust(1)
    return builder.as_markup()

def get_after_solution_analysis_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üíº –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å", callback_data="request_case_again")
    return builder.as_markup()

def get_admin_ai_references_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–°—Ç—Ä. 1)", callback_data="admin_list_ai_references_page_0"))
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="admin_add_ai_reference_prompt"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –≥–ª. –∞–¥–º–∏–Ω –º–µ–Ω—é)", callback_data="admin_main_menu_back"))
    return builder.as_markup()

def get_admin_ai_source_type_select_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for source_type_enum_member in AISourceType:
        builder.button(
            text=source_type_enum_member.name.replace("_", " ").title(),
            callback_data=f"admin_select_ai_ref_type_{source_type_enum_member.value}"
        )
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ (–≤ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)", callback_data="admin_ai_references_menu_back"))
    return builder.as_markup()

def get_admin_ai_reference_list_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_list_ai_references_page_{current_page - 1}")
        )
    if total_pages > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="admin_noop")
        )
    if current_page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"admin_list_ai_references_page_{current_page + 1}")
        )
    
    if pagination_buttons:
        builder.row(*pagination_buttons)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)", callback_data="admin_ai_references_menu_back"))
    return builder.as_markup()

def get_admin_ai_reference_actions_keyboard(reference_id: int, is_active: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_ai_reference_prompt_{reference_id}")
    active_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    builder.button(text=f"üëÅÔ∏è {active_text}", callback_data=f"admin_toggle_ai_reference_active_{reference_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_ai_reference_confirm_{reference_id}")
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="admin_list_ai_references_page_0"))
    return builder.as_markup()

def get_admin_manage_trial_keyboard(user_id: int, current_trial_end_date: Optional[datetime]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if current_trial_end_date and current_trial_end_date > datetime.now(current_trial_end_date.tzinfo):
        builder.button(text=f"‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç—Ä–∏–∞–ª –Ω–∞ 7 –¥–Ω–µ–π", callback_data=f"admin_grant_trial_{user_id}_7")
        builder.button(text=f"‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å —Ç—Ä–∏–∞–ª –Ω–∞ 30 –¥–Ω–µ–π", callback_data=f"admin_grant_trial_{user_id}_30")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–∞–ª", callback_data=f"admin_cancel_trial_{user_id}")
    else:
        builder.button(text="üéÅ –í—ã–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –Ω–∞ 7 –¥–Ω–µ–π", callback_data=f"admin_grant_trial_{user_id}_7")
        builder.button(text="üéÅ –í—ã–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –Ω–∞ 30 –¥–Ω–µ–π", callback_data=f"admin_grant_trial_{user_id}_30")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)", callback_data=f"admin_view_user_{user_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_manage_subscription_keyboard(user_id: int, current_subscription_status: Optional[str], current_plan_name: Optional[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    available_plans = {
        "base_1m": {"name": "–ë–∞–∑–æ–≤—ã–π - 1 –º–µ—Å—è—Ü", "duration_days": 30},
        "pro_1m": {"name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - 1 –º–µ—Å—è—Ü", "duration_days": 30},
        "pro_3m": {"name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - 3 –º–µ—Å—è—Ü–∞", "duration_days": 90},
    }

    for plan_id, plan_details in available_plans.items():
        builder.button(text=f"üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: {plan_details['name']}", callback_data=f"admin_activate_sub_{user_id}_{plan_id}")

    if current_subscription_status == "active":
        builder.button(text=f"üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É ({current_plan_name or 'N/A'})", callback_data=f"admin_deactivate_sub_{user_id}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)", callback_data=f"admin_view_user_{user_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_main_inline_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ù–æ–≤—ã–π –∫–µ–π—Å", callback_data="main_menu:request_case")
    builder.button(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="main_menu:my_progress")
    builder.button(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="main_menu:leave_feedback")
    builder.button(text="üí≥ –¢–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="main_menu:tariffs")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="main_menu:help")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_back_to_main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu:show")
    return builder.as_markup()
